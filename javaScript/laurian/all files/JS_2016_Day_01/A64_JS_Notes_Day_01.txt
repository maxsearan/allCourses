8:46 AM 12/8/2016
==================
JavaScript 

this course provides an introductory look at JavaScript, including some of its core functions as well as features and paradigms such as Asynchronous JavaScript and XML (AJAX).

The first part of the course examines JavaScript and helps you get started developing JavaScript applications. You don’t need any specific tools for JavaScript development, so you’ll see how to create JavaScript files in Microsoft Visual Studio. 


Assumptions
============
This course expects that you have at least a minimal understanding of concepts surrounding web development. You should be at least somewhat familiar with HTML and CSS.


A brief history of JavaScript
==============================
• JavaScript isn’t Java. 

• JavaScript was originally developed by Brendan Eich at Netscape sometime in 1995–1996. Back then, the language was called LiveScript. However, the folks in marketing had their way, and the language was renamed to JavaScript. Confusion soon ensued. You see, Java was the exciting new language at the time, and someone decided to try to capitalize on Java’s popularity by using its name. As a result, JavaScript found itself associated with the Java language. 

• JavaScript is not a compiled language.

• With the release of Microsoft Internet Explorer 3.0 in 1996, Microsoft included support for core JavaScript, known in Internet Explorer as JScript, and support for another scripting language called Microsoft Visual Basic, Scripting Edition, or VBScript.

• Although JavaScript and JScript were similar, their implementations weren’t exactly the same. Therefore, methods were developed to detect which browser the website visitor was using and respond with appropriate scripting. This process is known as browser detection. 

• In mid-1997, Microsoft and Netscape worked with the European Computer Manufacturers Association (ECMA) to release the first version of a language specification known as ECMAScript, more formally known as ECMA-262. Since that time, all browsers from Microsoft have implemented versions of the ECMAScript standard. Other popular browsers, such as Firefox, Safari, and Opera, have also implemented the ECMAScript standard.

ECMA-262 edition 3 was released in 1999. The good news is that browsers such as Microsoft Internet Explorer 5.5 and Netscape 6 supported the edition 3 standard, and every major browser since then has supported the version of JavaScript formalized in the ECMA-262 edition 3 standard. The bad news is that each browser applies this standard in a slightly different way, so incompatibilities still plague developers who use JavaScript.

The latest version of ECMAScript, as formalized in the standard known as ECMA-262, was released in late 2009 and is known as ECMA-262 edition 5 (http://www.ecmascript.org/).


It’s important to note that as a developer who is incorporating JavaScript into web applications, you need to account for the differences among the versions of ECMA-262, and among the many implementations of JavaScript. Accounting for these differences might mean implementing a script in slightly different ways, and testing, testing, and testing again in various browsers and on various platforms. On today’s Internet, users have little tolerance for poorly designed applications that work in only one browser.

If you think the standards of JavaScript programming are loosely defined, you’re right. Each browser supports JavaScript slightly differently, making your job that much more difficult. Your job is to keep track of these differences and account for them as necessary, and to try to find common ground among them as much as possible.

The Document Object Model (DOM)
================================
Another evolving standard relevant to the JavaScript programmer is the Document Object Model (DOM) standard developed by the World Wide Web Consortium (W3C). The W3C defines the DOM as “a platform- and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure, and style of documents


What’s in a JavaScript program?
================================
A JavaScript program consists of statements and expressions formed from tokens of various categories, including keywords, literals, separators, operators, and identifiers placed together in an order that is meaningful to a JavaScript interpreter, which is contained in most web browsers.

var smallNumber = 	4;
a token, or reserved word—var—is followed by other tokens, such as an identifier (smallNumber), an operator (=), and a literal (4).

Like in any programming language, statements get put together in an order that makes a program perform one or more functions. JavaScript defines functions in its own way, which you read much more about in one of the coming classes.

JavaScript placement on your Web page
======================================

<element_name atr =" " atr=" ">element_content</element_name>


<!doctype html>
<html>
  <head>
    <title>A Web Page Title</title>
    <script type="text/javascript"> MIME Multipurpose Internet Mail Extension 
	// JavaScript Goes Here
    </script>
</head>
<body>
<p style="color:red;">Hellp</p>
<script type="text/javascript">
  // JavaScript can go here too
</script>
</body>
</html>


JavaScript placed within the <BODY> tags executes as it is encountered by the browser, which is helpful when you need to write to the document by using a JavaScript function.

Because of the way browsers load JavaScript, the current best practice for placing JavaScript in your HTML is to position the <SCRIPT> tags at the end of the <BODY> element rather than in the <HEAD> element. Doing so helps to ensure that the content of the page is rendered if the browser blocks input while the JavaScript files are being loaded.

Placing JavaScript correctly
============================
JavaScript can be placed in a couple of locations within a Hypertext Markup Language (HTML) page: in the <HEAD> </HEAD> section or between the <BODY> and </BODY> tags. The most common location for JavaScript has traditionally been between the <HEAD> and </HEAD> tags near the top of the page. However, placing the <SCRIPT> stanza within the <BODY> section is becoming more common.

<head>
<script type="text/javascript">
</head>


One important issue to note when you use JavaScript relates to pages declared as Extensible Hypertext Markup Language (XHTML). Therefore, JavaScript used within strict XHTML should be declared as follows:

<head>
<script type="text/javascript">
  <![CDATA[
    //JavaScript goes here
  ]]>
</script>

Older browsers might not parse the CDATA section correctly. This problem can be worked around by placing the CDATA opening and closing lines within JavaScript comments, like this:

<head>
<script type="text/javascript">
  //<![CDATA[
    //JavaScript goes here
  //]]>
</script>

<script type ="text/javascript">
   "use strict";
    window.alert("Hello World!");
</script>

Link to external javasript file 
===============================
When you place the actual JavaScript code in a separate file, you don’t need to use this ugly CDATA section at all. 
Defining your JavaScript in separate files—usually with the file extension filename.js and then linking to those scripts within the page, is desirable.
<head>
   <script type ="text/javascript" src="scripts/filename.js"></script>
</head>

Placing JavaScript in an external file has several advantages, including the following:
■ Separation of code from markup:
Keeping the JavaScript code in a separate file makes maintaining the HTML easier, and it preserves the structure of the HTML without you having to use a CDATA section for XHTML.

■ Easier maintenance:
Using JavaScript in a separate file, you can make changes to the JavaScript code in that separate file without touching the HTML on the site.

■ Caching: 
Using a separate file for JavaScript enables web browsers to cache the file, thus speeding up the webpage load for the user.


What JavaScript can do
========================
JavaScript is largely a complementary language, meaning that it’s uncommon for an entire application to be written solely in JavaScript without the aid of other languages like HTML and without presentation in a web browser. Some Adobe products support JavaScript, and Windows 8 begins to change this, but JavaScript’s main use is in a browser.

JavaScript is also the J in the acronym AJAX (Asynchronous JavaScript and XML), the darling of the Web 2.0 phenomenon. However, beyond that, JavaScript is an everyday language providing the interactivity expected, maybe even demanded, by today’s web visitors. 

JavaScript can perform many tasks on the client side of the application. For example, it can add the needed interactivity to a website by creating drop-down menus, transforming the text on a page, adding dynamic elements to a page, and helping with form entry.



What JavaScript can’t do
=========================
Many of the operations JavaScript can’t perform are the result of JavaScript’s usage being somewhat limited to a web browser environment. 

• JavaScript can’t be forced on a client 
JavaScript relies on another interface or host program for its functionality. This host program is usually the client’s web browser, also known as a user agent. Because JavaScript is a client-side language, it can do only what the client allows it to do.

• JavaScript can’t guarantee data security
Because JavaScript is run wholly on the client, the developer must learn to let go. As you might expect, letting go of control over your program has serious implications. After the program is on the client’s computer, the client can do many undesirable things to the data before sending it back to the server. As with any other web programming, you should never trust any data coming back from the client. Even if you’ve used JavaScript functions to validate the contents of forms, you still must validate this input again when it gets to the server. A client with JavaScript disabled might send back garbage data through a web form.

• JavaScript doesn’t do servers
When developing server-side code such as Visual Basic .NET or PHP, you can be fairly sure that the server will implement certain functions, such as talking to a database or giving access to modules necessary for the web application.
JavaScript doesn’t have access to server-side variables. For example, JavaScript cannot access databases that are located on the server. JavaScript code is limited to what can be done inside the platform on which the script is running, which is typically the browser.


Where JavaScript fits
=====================
Today’s web is still evolving. One of the more popular movements is known as unobtrusive scripting. The unobtrusive scripting paradigm contains two components, progressive enhancement and behavioral separation. Behavioral separation calls for structure to be separated from style, and for both of these elements to be separated from behavior. In this model, HTML or XHTML provides the structure, whereas the CSS provides the style and JavaScript provides the behavior. Progressive enhancement means adding more features to the page as the browser’s capabilities are tested; enhancing the user experience when possible but not expecting that JavaScript or a certain JavaScript function will always be available. In this way, the JavaScript is unobtrusive; it doesn’t get in the way of the user experience. If JavaScript isn’t available in the browser, the website still works because the visitor can use the website in some other way.


I’m a proponent of unobtrusive scripting because it means that standards are followed and the resulting site adheres to the four recommendations: Emphasizes function over form, Follows standards, Renders correctly in multiple browsers, and Uses appropriate technologies at appropriate times. 


Unfortunately, this isn’t always the case. You could separate the HTML, CSS, and JavaScript and still end up using proprietary tags, but when you program in an unobtrusive manner, you tend to pay closer attention to detail and care much more about the end result being compliant with standards.


JavaScript and Windows 8/10
=========================
Microsoft Windows 8/10 represents a paradigm shift for JavaScript programmers. In Windows 8/10, Microsoft has elevated JavaScript to the same level as other client-side languages, such as Visual Basic and C#, for developing Windows 8/10 applications. Before Windows 8/10, if you wanted to create an application that ran on the desktop, you’d need to use Visual Basic, C#, or a similar language. With Windows 8/10, you need only use HTML and JavaScript to create a full-fledged Windows 8/10–style app.

Windows 8/10 exposes an Application Programming Interface (API), providing a set of functions that enable the JavaScript programmer to natively access behind-the-scenes areas of the operating system. This means that programming for Windows 8/10 is slightly different from programming JavaScript for a web browser.


Case sensitivity
================
JavaScript is case sensitive. You must be aware of this when naming variables and using the language keywords. A variable named remote is not the same as a variable named Remote or one named REMOTE. Similarly, the loop control keyword while is perfectly valid, but naming it WHILE or While will result in an error.

Keywords are lowercase, but variables can be any mix of case that you’d like.



There are two ways to use the <script> element: 
1. embed JavaScript code directly into the page or 
2. include JavaScript from an external file.	

To include inline JavaScript code, place JavaScript code inside the <script> element directly, as follows:
<script type="text/javascript">
   js statements;
</script>

To include JavaScript from an external file, the src attribute is required. The value of src is a URL linked to a file containing JavaScript code, like this:
<script type="text/javascript" src="scripts/myscript.js"></script>

One of the most powerful and most controversial parts of the <script> element is its ability to include JavaScript files from outside domains
<script type="text/javascript" src="http://www.somewhere.com/afile.js"></script>

The <noscript> element was created to provide alternate content for browsers without JavaScript.
Any content contained in a <noscript> element will be displayed under only the following two circumstances:
1. The browser doesn't support scripting.
2. The browser's scripting support is turned off.

For example:
<noscript>
<p>This page requires a JavaScript-enabled browser.</p>
</noscript>


JavaScript Language Basics
==========================
SYNTAX: ECMAScript's syntax borrows heavily from C and other C-like languages such as Java and Perl.

Case-sensitivity: The first concept to understand is that everything is case-sensitive; variables, function names, and operators are all case-sensitive.

Identifiers:
An identifier is the name of a variable, function, property, or function argument. Identifiers may be one or more characters in the following format:
1. The first character must be a letter, an underscore (_), or a dollar sign ($).
2. All other characters may be letters, underscores, dollar signs, or numbers.

Comments:
ECMAScript uses C-style comments for both single-line and block comments. 

A single-line comment begins with two front slashes (//) and has no end requirement because it spans only a single line.

//single line comment

A multiline comment begins and ends with /* and */, respectively, as the following code:

/* This is a multiline comment in JavaScript.
It is just like a C-style comment insofar as it can
span multiple lines before being closed. */


Using multiple single-line comments is perfectly valid, and I use them for short comment blocks rather than using the multiline comment style previously shown. 

// Here is another comment block.
// This one uses multiple lines.
// Each line must be preceded with two slashes.


JavaScript statements:
======================
a JavaScript statement, or expression, is a collection of tokens of various categories including keywords, literals, separators, operators, and identifiers that are put together to create something that makes sense to the JavaScript interpreter. A statement usually ends with a semicolon, except in special cases like loop constructors such as if, while, and for, which are covered in the comining classes.

Semicolons
===========
Semicolons are used to delineate expressions in JavaScript. Technically, semicolons are not required for most statements and expressions. However, the subtle problems that you can encounter when you don’t use semicolons add unnecessary errors and hence unnecessary debugging time. In some instances, the JavaScript interpreter inserts a semicolon when you might not have wanted one at all.

Consider this statement:
return
(varName);

In all likelihood, you wanted to write:

return(varName);

But JavaScript, acting on its own, inserts a semicolon after the return statement, making the code appear like this to the JavaScript interpreter:

return;
(varName);

This code won’t work; the interpreter will misunderstand your intentions. 


Statements: Statements in ECMAScript are terminated by a semicolon.



KEYWORDS AND RESERVED WORDS:
============================
Certain words in JavaScript are reserved, which means you can’t use them as variables, identifiers, or constant names within your program because doing so will cause the code to have unexpected results, such as errors. 

The complete list of keywords is as follows:
break | case | catch| continue | debugger | default | delete | 
do | else | finally | for | function | if | in | instanceof | 
new | return | switch | this | typeof | var | void | while | with | throw | try



JavaScript’s Strict Mode: 
=========================
ECMA-262 edition 5 introduced a strict variant, commonly referred to as strict mode, which adds enhanced error checking and security. For example, to help fight against mistyped variable names, variable declarations require the use of the var keyword.

To enable strict mode for an entire script, include the following at the top:
"use strict";

Strict mode is locally scoped, meaning that it can be enabled globally by placing the use strict line at the beginning of the script; or it can be enabled only within a function by placing the line within the function itself, like so:

function doSomething() {
  "use strict";
  // function's code goes here.
}


One strict mode enhancement that will help catch typographical errors is the prevention of undeclared variables. All variables in strict mode need to be instantiated prior to use. For example, consider this code:

"use strict";
x = 4; // Produces a syntax error


When used in strict mode, the preceding code would create an error condition because the variable x hasn’t been declared with the var keyword, as in the following example:

"use strict";
var x = 4; // This syntax is ok


VARIABLES: 
==========
ECMAScript variables are loosely typed, meaning that a variable can hold any type of data. Every variable is  simply a named placeholder for a value. To define a variable, use the var operator.

var name;
name = "John";

var age;
age = 32;

var married;
married = false;



DATA TYPES: 
===========
The data types of a language describe the basic elements that can be used within that language. You’re probably already familiar with data types, such as strings or integers, from other languages.

There are five simple data types (also called primitive types) in ECMAScript: Undefined, Null, Boolean, Number, and String. There is also one complex data type called Object.

undefined means that the variable has not been declared, or has not been given a value. 
null is a special value meaning "no value". null is a special object because typeof null returns 'object'.


The typeof Operator: 
====================
Because ECMAScript is loosely typed, there needs to be a way to determine the data type of a given variable. The typeof operator returns the variable type of the given operand.

var message = "some string";
window.alert(typeof message); // returns "string"
alert(typeof(message)); // returns "string"
alert(typeof 95); // returns "number"

The Undefined Type:
===================
The Undefined type has only one value, which is the special value undefined. When a variable is  declared using var but not initialized, it is assigned the value of undefined as follows:

var message;
document.write(message); // returns undefined

The Null Type: 
==============
The Null type is the second data type that has only one value: the special value null. Logically, a null value is an empty object pointer, which is why typeof returns "object" when it's passed a null value in the following example:
var car = null;
document.write(typeof car); //returns "object"

The Boolean Type:
==================
The Boolean type is one of the most frequently used types in ECMAScript and has only two literal values: true and false. These values are distinct from numeric values, so true is not equal to 1, and false is not equal to 0.

The Number Type:
================
Perhaps the most interesting data type in ECMAScript is Number, which uses the IEEE-754 format to represent both integers and floating-point values (also called double-precision values in some languages).

var intNumber = 15;
var floatNumber = 20.0;

Range of Values:
=================
Not all numbers in the world can be represented in ECMAScript, because of memory constraints. The smallest number that can be represented in ECMAScript is stored in Number.MIN_VALUE and is 5e-324 on most browsers; the largest number is stored in Number.MAX_VALUE and is 1.798e+308 on most browsers.

Not-a-Number (NaN)
===================
There is a special numeric value called NaN, short for Not a Number, which is used to indicate when an operation intended to return a number has failed (as opposed to throwing an error). For example, dividing any number by 0 typically causes an error in other programming languages, halting code execution. In ECMAScript, dividing a number by 0 returns NaN, which allows other processing to continue.


Number Conversions: 
===================
There are three functions to convert nonnumeric values into numbers: the Number() casting function, the parseInt() function, and the parseFloat() function.

The toFixed(n) method returns a string representation of a number with a specified number of decimal points, as in this example:
var num = 10/3;
alert(num.toFixed(2)); //"3.33"


The String Type: 
================
The String data type represents a sequence of zero or more 16-bit Unicode characters. Strings can be  delineated by either double quotes (") or single quotes ('), so both of the following are legal:
var firstName = "John";
var lastName = 'Smith';

Converting to a String: 
=======================
There are two ways to convert a value into a string. The first is to use the toString() method  that almost every value has.

var age = 11;
var ageAsString = age.toString(); //the string "11"
var found = true;
var foundAsString = found.toString(); //the string "true"

If you're not sure that a value isn't null or undefined, you can use the String() casting function, which always returns a string regardless of the value type.

var value1 = 10;
var value2 = true;
var value3 = null;
var value4;
alert(String(value1)); //"10"
alert(String(value2)); //"true"
alert(String(value3)); //"null"
alert(String(value4)); //"undefined"


The Object Type: 
================
Objects in ECMAScript start out as nonspecific groups of data and functionality. Objects are created by using the new operator followed by the name of the object type to create.

var obj = new Object();


JavaScript Operators: 
======================
ECMAScript-262 describes a set of operators that can be used to manipulate data values

Unary Operators: 
================
Unary operators have a single operand or work with a single expression in JavaScript. Operators that work on only one value are called unary operators. The increment operators are taken directly from C and come in two versions: prefix (++variable_name) | (--variable_name) and postfix (variable_name++) | (variable_name--).

Incrementing and decrementing
==============================
You use the ++ and -- operators to increment and decrement a number, respectively, as shown in the following code:
var aNum = 4;
aNum++;
++aNum;

var age = 29;
++age;

This is effectively equal to the following:
var age = 29;
age = age + 1;

The first example is postfixing:
var aNum = 4;
var y = aNum++; // y now has the value 4, but aNum then has the value 5

The second example is prefixing:
var aNum = 4;
var y = ++aNum; // y now has the value 5, as does aNum


Unary Plus and Minus: 
=====================
The unary plus and minus operators are familiar symbols to most developers and operate the same way in ECMAScript as they do in high-school math. The unary plus is represented by a single plus sign (+) placed before a variable and does nothing to a numeric value, as shown in this example:
var num = 25;
num = +num; //still 25

When the unary plus is applied to a nonnumeric value, it performs the same conversion as the Number() casting function: the Boolean values of false and true are converted to 0 and 1, string values are parsed according to a set of specific rules, and objects have their valueOf() and/or toString() method called to get a value to convert.

var x = +"43";
This code results in the string “43” being converted to a number by JavaScript and the numeric value 43 being stored in the variable x.

Boolean Operators: 
===================
There are three Boolean operators: NOT (!), AND (&&), and OR (||).

Arithmetic Operators: 
=====================
additive (+), Subtract (-), multiply (*), divide (/), and modulus (%).

The addition operator:
======================
The addition operator operates in different ways, depending on the types of the values being added. When adding two strings, the addition operator concatenates the left and right arguments. You can get odd results when the types being added differ because JavaScript must convert one of the types before performing the addition (or any math operation).

var aNum = 947;
var aStr= "Rush";
var anotherNum = 53;
var aStrNum = "43";
var result1 = aNum + aStr; // result1 will be the string "947Rush";
var result2 = aNum + anotherNum; // result2 will be the number 1000;
var result3 = aNum + aStrNum; // result3 will be 94743;

sum = 100;
document.write("the sum is " + sum); ==> the sum is 100


However, using Number() converts aStrNum to a number so that you can use it as expected in a mathematical expression, such as addition.

var aNum = 947; 
var aStrNum = Number("43");
var result3 = aNum * aStrNum; // result3 will be 990;


The Multiplicative operators:
=============================
Like additive operators, multiplicative operators behave just as you might expect; they perform multiplication and division. The multiplication operator (*) multiplies two numbers, whereas the division operator (/) divides numbers.

var mult = 2 * 2;

And division:

var divisi = 4 / 2;

The Modulo Operator: 
====================
The multiplicative operators include the modulo operator, which is indicated by the percent sign (%). The modulo operator yields the remainder of the division of two numbers. For example, the modulo of 4 divided by 3 is 1

var mod = (4 % 3);


Comparison (Relational) Operators: 
==================================
Relational operators test expressions to find out whether they are greater than or less than each other, or whether a given value is in a list or is an instance of a certain type. They perform comparisons between values.

The Less than (<), 
Greater than (>), 
Less than or equal to (<=), 
Greater than or equal to (>=) 
in - Contained within an expression or object
instanceof - Is an instance of an object

if (3 > 4) {
   // do something
}


in operator
===========
The in operator is most commonly used to evaluate whether a given property is contained within an object. Be aware that the in operator searches for the existence of a property and not the value of that property.

var myObj = {
	star: "Algol",
	constellation: "Perseus"
};

if ("star" in myObj) {
	alert("There is a property called star in this object");
}


The instanceof operator
========================
The instanceof operator tests whether a given expression, usually a variable, is an instance of the object or a particular data type. Yes, that’s awkward. 

var myDate = new Date();
if (myDate instanceof Date) {
	//do something
}

Because the variable myDate is an instance of the built-in Date object, the instanceof evaluation returns true.


Equality Operators: 
===================
Equal (==)  and Not Equal (!=)

Conditional Operator: 
=====================
The conditional operator is one of the most versatile in ECMAScript, and it takes on the same form  as in Java, which is as follows:
variable = (condition or boolean_expression) ? true_value : false_value;

Assignment Operators: 
=====================
Simple assignment is done with the equal sign (=) and simply assigns the value on the right to the variable on the left.
var num = 10;

Comma Operator: 
================
The comma operator separates expressions and executes them in order. Commonly, the comma is used to separate variable declarations, which enables multiple variables to be declared on one line:

var num1=1, num2=2, num3=3;

Alternatively, you can also set values:
var num1=3, num2=7, num3=10;

Using the delete operator
=========================
The delete operator takes a property of an object or the index of an array and removes it or causes it to become undefined. Here’s a simple example using an array:

var myArray = ["The RCMP", "The Police", "State Patrol"];
delete myArray[0]; // myArray now contains only "The Police" and "State Patrol"

The preceding code creates an array called myArray and then promptly deletes the value at the first index, making it "undefined." The delete operator works with objects





